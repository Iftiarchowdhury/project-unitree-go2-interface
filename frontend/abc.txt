My backend:
  ================================================================
  File Summary
  ================================================================



  File Format:
  ------------
  The content is organized as follows:
  1. This summary section
  2. Repository information
  3. Repository structure
  4. Multiple file entries, each consisting of:
    a. A separator line (================)
    b. The file path (File: path/to/file)
    c. Another separator line
    d. The full contents of the file
    e. A blank line



  ================================================================
  Repository Structure
  ================================================================
  .env.example
  .gitignore
  eslint.config.js
  index.html
  package.json
  postcss.config.js
  README.md
  src/App.tsx
  src/components/Auth/AuthContext.tsx
  src/components/Auth/AuthProvider.tsx
  src/components/Auth/index.ts
  src/components/Auth/LoginPage.tsx
  src/components/Auth/RegisterPage.tsx
  src/components/Config/ConfigPage.tsx
  src/components/Control/ControlView.tsx
  src/components/Layout/Footer.tsx
  src/components/Layout/Header.tsx
  src/components/Layout/index.ts
  src/components/Layout/Sidebar.tsx
  src/components/Notifications/NotificationsView.tsx
  src/components/Profile/ProfileView.tsx
  src/components/Stats/StatsView.tsx
  src/components/Users/UserItem.tsx
  src/components/Users/UserList.tsx
  src/config/firebase.config.ts
  src/env.d.ts
  src/index.css
  src/main.tsx
  src/routes.tsx
  src/services/api.ts
  src/services/dummyApi.ts
  src/services/firebase.ts
  src/services/robotService.ts
  src/types/index.ts
  src/types/notifications.ts
  src/vite-env.d.ts
  tailwind.config.js
  tsconfig.app.json
  tsconfig.json
  tsconfig.node.json
  vite.config.ts

  ================================================================
  Repository Files
  ================================================================

  ================
  File: .env.example
  ================
  VITE_FIREBASE_API_KEY=
  VITE_FIREBASE_AUTH_DOMAIN=
  VITE_FIREBASE_PROJECT_ID=
  VITE_FIREBASE_STORAGE_BUCKET=
  VITE_FIREBASE_MESSAGING_SENDER_ID=
  VITE_FIREBASE_APP_ID=
  VITE_FIREBASE_DATABASE_URL=

  ================
  File: .gitignore
  ================
  # Logs
  logs
  *.log
  npm-debug.log*
  yarn-debug.log*
  yarn-error.log*
  pnpm-debug.log*
  lerna-debug.log*

  node_modules
  dist
  dist-ssr
  *.local

  # Environment files
  .env
  .env.local
  .env.development
  .env.production

  # Editor directories and files
  .vscode/*
  !.vscode/extensions.json
  .idea
  .DS_Store
  *.suo
  *.ntvs*
  *.njsproj
  *.sln
  *.sw?

  ================
  File: eslint.config.js
  ================
  import js from '@eslint/js';
  import globals from 'globals';
  import reactHooks from 'eslint-plugin-react-hooks';
  import reactRefresh from 'eslint-plugin-react-refresh';
  import tseslint from 'typescript-eslint';

  export default tseslint.config(
    { ignores: ['dist'] },
    {
      extends: [js.configs.recommended, ...tseslint.configs.recommended],
      files: ['**/*.{ts,tsx}'],
      languageOptions: {
        ecmaVersion: 2020,
        globals: globals.browser,
      },
      plugins: {
        'react-hooks': reactHooks,
        'react-refresh': reactRefresh,
      },
      rules: {
        ...reactHooks.configs.recommended.rules,
        'react-refresh/only-export-components': [
          'warn',
          { allowConstantExport: true },
        ],
      },
    }
  );

  ================
  File: index.html
  ================
  <!doctype html>
  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <link rel="icon" type="image/svg+xml" href="/vite.svg" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Vite + React + TS</title>
    </head>
    <body>
      <div id="root"></div>
      <script type="module" src="/src/main.tsx"></script>
    </body>
  </html>

  ================
  File: package.json
  ================
  {
    "name": "vite-react-typescript-starter",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
      "start": "vite",
      "dev": "vite",
      "build": "vite build",
      "lint": "eslint .",
      "preview": "vite preview"
    },
    "dependencies": {
      "lucide-react": "^0.344.0",
      "react": "^18.3.1",
      "react-dom": "^18.3.1",
      "axios": "^1.6.7",
      "firebase": "^10.8.0",
      "react-router-dom": "^6.22.1",
      "zustand": "^4.5.1",
      "react-hot-toast": "^2.4.1"
    },
    "devDependencies": {
      "@eslint/js": "^9.9.1",
      "@types/react": "^18.3.5",
      "@types/react-dom": "^18.3.0",
      "@vitejs/plugin-react": "^4.3.1",
      "autoprefixer": "^10.4.18",
      "eslint": "^9.9.1",
      "eslint-plugin-react-hooks": "^5.1.0-rc.0",
      "eslint-plugin-react-refresh": "^0.4.11",
      "globals": "^15.9.0",
      "postcss": "^8.4.35",
      "tailwindcss": "^3.4.1",
      "typescript": "^5.5.3",
      "typescript-eslint": "^8.3.0",
      "vite": "^5.4.2"
    }
  }

  ================
  File: postcss.config.js
  ================
  export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };

  ================
  File: README.md
  ================
  # project-unitree
  This is project for unitree

  ================
  File: src/App.tsx
  ================
  import { Outlet, useLocation } from 'react-router-dom';
  import { Toaster } from 'react-hot-toast';
  import { Header, Sidebar, Footer } from './components/Layout';
  import { AuthProvider } from './components/Auth/AuthProvider';

  function App() {
    const location = useLocation();
    const isAuthPage = ['/login', '/register'].includes(location.pathname);

    return (
      <AuthProvider>
        <div className="min-h-screen bg-gray-900 text-white">
          {!isAuthPage && <Header />}
          <div className="flex">
            {!isAuthPage && <Sidebar />}
            <main className={`${isAuthPage ? 'w-full' : 'flex-1'}`}>
              <Outlet />
            </main>
          </div>
          {!isAuthPage && <Footer />}
        </div>
        <Toaster
          position="top-right"
          toastOptions={{
            className: 'bg-gray-800 text-white',
            duration: 3000,
            style: {
              background: '#1f2937',
              color: '#fff',
            },
          }}
        />
      </AuthProvider>
    );
  }

  export default App;

  ================
  File: src/components/Auth/AuthContext.tsx
  ================
  import { createContext, useContext } from 'react';
  import type { User } from '../../types';

  interface AuthContextType {
    user: User | null;
    loading: boolean;
    isAdmin: boolean;
    login: (email: string, password: string) => Promise<void>;
    logout: () => Promise<void>;
    register: (email: string, password: string, displayName: string) => Promise<void>;
  }

  export const AuthContext = createContext<AuthContextType>({
    user: null,
    loading: true,
    isAdmin: false,
    login: async () => {},
    logout: async () => {},
    register: async () => {},
  });

  export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
      throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
  };

  ================
  File: src/components/Auth/AuthProvider.tsx
  ================
  import { useState, useEffect } from 'react';
  import { AuthContext } from './AuthContext';
  import { auth, loginUser, logoutUser, registerUser, getUserProfile } from '../../services/firebase';
  import { onAuthStateChanged } from 'firebase/auth';
  import type { User } from '../../types';
  import { toast } from 'react-hot-toast';

  interface AuthProviderProps {
    children: React.ReactNode;
  }

  export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
      const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
        if (firebaseUser) {
          try {
            const userProfile = await getUserProfile(firebaseUser.uid);
            if (userProfile) {
              setUser(userProfile);
            }
          } catch (error) {
            console.error('Error fetching user profile:', error);
            toast.error('Error loading user profile');
          }
        } else {
          setUser(null);
        }
        setLoading(false);
      });

      return () => unsubscribe();
    }, []);

    const login = async (email: string, password: string) => {
      try {
        const userCredential = await loginUser(email, password);
        const userProfile = await getUserProfile(userCredential.user.uid);
        if (userProfile) {
          setUser(userProfile);
          toast.success('Successfully logged in');
        }
      } catch (error) {
        console.error('Login error:', error);
        toast.error('Failed to login');
        throw error;
      }
    };

    const logout = async () => {
      try {
        await logoutUser();
        setUser(null);
        toast.success('Successfully logged out');
      } catch (error) {
        console.error('Logout error:', error);
        toast.error('Failed to logout');
        throw error;
      }
    };

    const register = async (email: string, password: string, displayName: string) => {
      try {
        const userCredential = await registerUser(email, password, displayName);
        const userProfile = await getUserProfile(userCredential.user.uid);
        if (userProfile) {
          setUser(userProfile);
          toast.success('Successfully registered');
        }
      } catch (error) {
        console.error('Registration error:', error);
        toast.error('Failed to register');
        throw error;
      }
    };

    return (
      <AuthContext.Provider
        value={{
          user,
          loading,
          isAdmin: user?.role === 'admin',
          login,
          logout,
          register,
        }}
      >
        {children}
      </AuthContext.Provider>
    );
  };

  ================
  File: src/components/Auth/index.ts
  ================
  export { AuthProvider } from './AuthProvider';
  export { useAuth } from './AuthContext';
  export { LoginPage } from './LoginPage';
  export { RegisterPage } from './RegisterPage';

  ================
  File: src/components/Auth/LoginPage.tsx
  ================
  import { useState } from 'react';
  import { useAuth } from './AuthContext';
  import { Link, useNavigate } from 'react-router-dom';
  import { Mail, Lock, LogIn } from 'lucide-react';

  export const LoginPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [loading, setLoading] = useState(false);
    const { login } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      setLoading(true);
      
      try {
        await login(email, password);
        navigate('/control');
      } catch (error) {
        console.error('Login error:', error);
      } finally {
        setLoading(false);
      }
    };

    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div>
            <div className="flex justify-center mb-4">
              <div className="bg-blue-500 p-4 rounded-full">
                <LogIn className="w-8 h-8" />
              </div>
            </div>
            <h2 className="mt-6 text-center text-3xl font-extrabold text-white">
              Sign in to your account
            </h2>
            <p className="mt-2 text-center text-sm text-gray-400">
              Control your robot from anywhere, anytime
            </p>
          </div>
          <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
            <div className="space-y-4">
              <div>
                <label htmlFor="email-address" className="sr-only">
                  Email address
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Mail className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    id="email-address"
                    name="email"
                    type="email"
                    autoComplete="email"
                    required
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="appearance-none relative block w-full px-3 py-3 pl-10 border border-gray-700 placeholder-gray-400 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-800 transition-colors"
                    placeholder="Email address"
                  />
                </div>
              </div>
              <div>
                <label htmlFor="password" className="sr-only">
                  Password
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Lock className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    id="password"
                    name="password"
                    type="password"
                    autoComplete="current-password"
                    required
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="appearance-none relative block w-full px-3 py-3 pl-10 border border-gray-700 placeholder-gray-400 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-800 transition-colors"
                    placeholder="Password"
                  />
                </div>
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <span className="absolute left-0 inset-y-0 flex items-center pl-3">
                  <LogIn className="h-5 w-5 text-blue-500 group-hover:text-blue-400" />
                </span>
                {loading ? 'Signing in...' : 'Sign in'}
              </button>
            </div>

            <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
              <div className="text-sm">
                <Link
                  to="/forgot-password"
                  className="font-medium text-blue-500 hover:text-blue-400 transition-colors"
                >
                  Forgot your password?
                </Link>
              </div>
              <div className="text-sm">
                <Link
                  to="/register"
                  className="font-medium text-blue-500 hover:text-blue-400 transition-colors"
                >
                  Don't have an account? Sign up
                </Link>
              </div>
            </div>
          </form>
        </div>
      </div>
    );
  };

  ================
  File: src/components/Auth/RegisterPage.tsx
  ================
  import { useState } from 'react';
  import { useAuth } from './AuthContext';
  import { Link, useNavigate } from 'react-router-dom';
  import { Mail, Lock, User, UserPlus } from 'lucide-react';

  export const RegisterPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [displayName, setDisplayName] = useState('');
    const [loading, setLoading] = useState(false);
    const { register } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      setLoading(true);
      
      try {
        await register(email, password, displayName);
        navigate('/control');
      } catch (error) {
        console.error('Registration error:', error);
      } finally {
        setLoading(false);
      }
    };

    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div>
            <div className="flex justify-center mb-4">
              <div className="bg-blue-500 p-4 rounded-full">
                <UserPlus className="w-8 h-8" />
              </div>
            </div>
            <h2 className="mt-6 text-center text-3xl font-extrabold text-white">
              Create your account
            </h2>
            <p className="mt-2 text-center text-sm text-gray-400">
              Join us to start controlling your robot
            </p>
          </div>
          <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
            <div className="space-y-4">
              <div>
                <label htmlFor="display-name" className="sr-only">
                  Display Name
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <User className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    id="display-name"
                    name="displayName"
                    type="text"
                    required
                    value={displayName}
                    onChange={(e) => setDisplayName(e.target.value)}
                    className="appearance-none relative block w-full px-3 py-3 pl-10 border border-gray-700 placeholder-gray-400 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-800 transition-colors"
                    placeholder="Display Name"
                  />
                </div>
              </div>
              <div>
                <label htmlFor="email-address" className="sr-only">
                  Email address
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Mail className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    id="email-address"
                    name="email"
                    type="email"
                    autoComplete="email"
                    required
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="appearance-none relative block w-full px-3 py-3 pl-10 border border-gray-700 placeholder-gray-400 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-800 transition-colors"
                    placeholder="Email address"
                  />
                </div>
              </div>
              <div>
                <label htmlFor="password" className="sr-only">
                  Password
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Lock className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    id="password"
                    name="password"
                    type="password"
                    autoComplete="new-password"
                    required
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="appearance-none relative block w-full px-3 py-3 pl-10 border border-gray-700 placeholder-gray-400 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-800 transition-colors"
                    placeholder="Password"
                  />
                </div>
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <span className="absolute left-0 inset-y-0 flex items-center pl-3">
                  <UserPlus className="h-5 w-5 text-blue-500 group-hover:text-blue-400" />
                </span>
                {loading ? 'Creating account...' : 'Create account'}
              </button>
            </div>

            <div className="text-center mt-4">
              <div className="text-sm">
                <Link
                  to="/login"
                  className="font-medium text-blue-500 hover:text-blue-400 transition-colors"
                >
                  Already have an account? Sign in
                </Link>
              </div>
            </div>
          </form>
        </div>
      </div>
    );
  };

  ================
  File: src/components/Config/ConfigPage.tsx
  ================
  import { useState } from 'react';
  import { Settings, Save, RotateCcw } from 'lucide-react';
  import { toast } from 'react-hot-toast';

  interface ConfigSection {
    title: string;
    description: string;
    fields: {
      key: string;
      label: string;
      type: 'text' | 'number' | 'switch' | 'select';
      options?: string[];
      value: any;
    }[];
  }

  export const ConfigPage = () => {
    const [configSections, setConfigSections] = useState<ConfigSection[]>([
      {
        title: 'Robot Settings',
        description: 'Configure basic robot parameters',
        fields: [
          {
            key: 'maxSpeed',
            label: 'Maximum Speed (m/s)',
            type: 'number',
            value: 2.5
          },
          {
            key: 'operationMode',
            label: 'Operation Mode',
            type: 'select',
            options: ['Manual', 'Autonomous', 'Hybrid'],
            value: 'Manual'
          }
        ]
      },
      {
        title: 'Safety Settings',
        description: 'Configure safety parameters',
        fields: [
          {
            key: 'emergencyStop',
            label: 'Emergency Stop Enabled',
            type: 'switch',
            value: true
          },
          {
            key: 'obstacleDistance',
            label: 'Minimum Obstacle Distance (m)',
            type: 'number',
            value: 0.5
          }
        ]
      }
    ]);

    const handleFieldChange = (sectionIndex: number, fieldIndex: number, value: any) => {
      const newSections = [...configSections];
      newSections[sectionIndex].fields[fieldIndex].value = value;
      setConfigSections(newSections);
    };

    const handleSave = async () => {
      try {
        // Here you would typically save to your backend
        toast.success('Configuration saved successfully');
      } catch (error) {
        console.error('Error saving configuration:', error);
        toast.error('Failed to save configuration');
      }
    };

    const handleReset = () => {
      // Here you would typically reset to default values
      toast.success('Configuration reset to defaults');
    };

    return (
      <div className="container mx-auto px-6 py-8">
        <div className="flex justify-between items-center mb-8">
          <div className="flex items-center gap-3">
            <Settings className="w-6 h-6 text-blue-500" />
            <h1 className="text-2xl font-bold">System Configuration</h1>
          </div>
          <div className="flex gap-4">
            <button
              onClick={handleReset}
              className="flex items-center gap-2 px-4 py-2 bg-gray-700 rounded-lg hover:bg-gray-600 transition"
            >
              <RotateCcw className="w-5 h-5" />
              <span>Reset to Defaults</span>
            </button>
            <button
              onClick={handleSave}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700 transition"
            >
              <Save className="w-5 h-5" />
              <span>Save Changes</span>
            </button>
          </div>
        </div>

        <div className="space-y-6">
          {configSections.map((section, sectionIndex) => (
            <div key={section.title} className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-2">{section.title}</h2>
              <p className="text-gray-400 mb-6">{section.description}</p>
              
              <div className="space-y-4">
                {section.fields.map((field, fieldIndex) => (
                  <div key={field.key} className="flex items-center justify-between">
                    <label className="flex-1">{field.label}</label>
                    <div className="w-64">
                      {field.type === 'switch' ? (
                        <button
                          onClick={() => handleFieldChange(sectionIndex, fieldIndex, !field.value)}
                          className={`w-12 h-6 rounded-full transition-colors ${
                            field.value ? 'bg-blue-600' : 'bg-gray-600'
                          }`}
                        >
                          <div
                            className={`w-4 h-4 rounded-full bg-white transition-transform ${
                              field.value ? 'translate-x-7' : 'translate-x-1'
                            }`}
                          />
                        </button>
                      ) : field.type === 'select' ? (
                        <select
                          value={field.value}
                          onChange={(e) => handleFieldChange(sectionIndex, fieldIndex, e.target.value)}
                          className="w-full bg-gray-700 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          {field.options?.map(option => (
                            <option key={option} value={option}>{option}</option>
                          ))}
                        </select>
                      ) : (
                        <input
                          type={field.type}
                          value={field.value}
                          onChange={(e) => handleFieldChange(
                            sectionIndex,
                            fieldIndex,
                            field.type === 'number' ? parseFloat(e.target.value) : e.target.value
                          )}
                          className="w-full bg-gray-700 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  ================
  File: src/components/Control/ControlView.tsx
  ================
  import { useState, useEffect } from 'react';
  import { robotService } from '../../services/robotService';
  import type { RobotStats } from '../../types';
  import { ChevronUp, ChevronDown, ChevronLeft, ChevronRight, Square } from 'lucide-react';
  import { toast } from 'react-hot-toast';

  export const ControlView = () => {
    const [stats, setStats] = useState<RobotStats | null>(null);
    const [ipAddress, setIpAddress] = useState('');
    const [isConnected, setIsConnected] = useState(false);
    const [selectedCommand, setSelectedCommand] = useState('');

    const commands = [
      'standup',
      'sitdown',
      'left',
      'right',
      'forward',
      'backward'
    ];

    const validateIpAddress = (ip: string) => {
      const ipRegex = /^(\d{1,3}\.){3}\d{1,3}$/;
      if (!ipRegex.test(ip)) return false;
      const parts = ip.split('.');
      return parts.every(part => {
        const num = parseInt(part);
        return num >= 0 && num <= 255;
      });
    };

    const handleConnect = async () => {
      if (!validateIpAddress(ipAddress)) {
        toast.error('Invalid IP address format');
        return;
      }

      try {
        await robotService.connect(ipAddress);
        setIsConnected(true);
        toast.success('Successfully connected to robot');
      } catch (error) {
        console.error('Connection error:', error);
        toast.error('Failed to connect to robot');
      }
    };

    const handleCommand = async (command: string) => {
      if (!isConnected) {
        toast.error('Please connect to robot first');
        return;
      }

      try {
        await robotService.sendCommand(command);
        toast.success(`Command ${command} sent successfully`);
      } catch (error) {
        console.error('Error sending command:', error);
        toast.error('Failed to send command');
      }
    };

    const handleExecuteCommand = async () => {
      if (!selectedCommand) {
        toast.error('Please select a command');
        return;
      }
      await handleCommand(selectedCommand);
    };

    const handleTerminate = async () => {
      try {
        await robotService.terminateSession();
        setIsConnected(false);
        toast.success('Session terminated successfully');
      } catch (error) {
        console.error('Error terminating session:', error);
        toast.error('Failed to terminate session');
      }
    };

    return (
      <div className="container mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Video Feed */}
          <div className="lg:col-span-2">
            <div className="bg-black rounded-lg overflow-hidden aspect-video">
              <video
                className="w-full h-full object-cover"
                autoPlay
                playsInline
                muted
                loop
                poster="https://www.docs.quadruped.de/projects/go2/html/_images/Go2_Walking.gif"
              >
                <source src="/video-feed-url" type="video/mp4" />
                Your browser does not support video playback.
              </video>
            </div>
          </div>

          {/* Controls */}
          <div className="space-y-6">
            {/* Connection Panel */}
            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Connection</h2>
              <div className="space-y-4">
                <div>
                  <label htmlFor="ip-address" className="block text-sm font-medium mb-2">
                    Robot IP Address
                  </label>
                  <div className="flex gap-2">
                    <input
                      id="ip-address"
                      type="text"
                      value={ipAddress}
                      onChange={(e) => setIpAddress(e.target.value)}
                      placeholder="192.168.1.100"
                      className="flex-1 bg-gray-700 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <button
                      onClick={handleConnect}
                      disabled={isConnected}
                      className="px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700 transition disabled:opacity-50"
                    >
                      {isConnected ? 'Connected' : 'Connect'}
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Control Pad */}
            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Controls</h2>
              <div className="space-y-4 max-w-[240px] mx-auto">
                {/* First row - Up arrow */}
                <div className="flex justify-center">
                  <button
                    onClick={() => handleCommand('forward')}
                    className="w-16 h-16 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-gray-600 active:bg-gray-500 transition"
                  >
                    <ChevronUp className="w-8 h-8" />
                  </button>
                </div>

                {/* Second row - Left, Stop, Right */}
                <div className="flex justify-center gap-4">
                  <button
                    onClick={() => handleCommand('left')}
                    className="w-16 h-16 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-gray-600 active:bg-gray-500 transition"
                  >
                    <ChevronLeft className="w-8 h-8" />
                  </button>
                  <button
                    onClick={() => handleCommand('stop')}
                    className="w-16 h-16 bg-red-700 rounded-lg flex items-center justify-center hover:bg-red-600 active:bg-red-500 transition"
                  >
                    <Square className="w-8 h-8" />
                  </button>
                  <button
                    onClick={() => handleCommand('right')}
                    className="w-16 h-16 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-gray-600 active:bg-gray-500 transition"
                  >
                    <ChevronRight className="w-8 h-8" />
                  </button>
                </div>

                {/* Third row - Down arrow */}
                <div className="flex justify-center">
                  <button
                    onClick={() => handleCommand('backward')}
                    className="w-16 h-16 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-gray-600 active:bg-gray-500 transition"
                  >
                    <ChevronDown className="w-8 h-8" />
                  </button>
                </div>
              </div>
            </div>

            {/* Command Selection */}
            <div className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Commands</h2>
              <div className="space-y-4">
                <select
                  value={selectedCommand}
                  onChange={(e) => setSelectedCommand(e.target.value)}
                  className="w-full bg-gray-700 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Select Command</option>
                  {commands.map((cmd) => (
                    <option key={cmd} value={cmd}>
                      {cmd.charAt(0).toUpperCase() + cmd.slice(1)}
                    </option>
                  ))}
                </select>
                <button
                  onClick={handleExecuteCommand}
                  className="w-full px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700 transition"
                >
                  Execute
                </button>
              </div>
            </div>

            {/* Terminate Session */}
            <button
              onClick={handleTerminate}
              className="w-full px-4 py-2 bg-red-600 rounded-lg hover:bg-red-700 transition"
            >
              Terminate Session
            </button>
          </div>
        </div>
      </div>
    );
  };

  ================
  File: src/components/Layout/Footer.tsx
  ================
  export const Footer = () => {
    return (
      <footer className="bg-gray-800">
        <div className="container mx-auto px-6 py-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="text-gray-400 text-sm">
              © 2024 RoboControl X1. All rights reserved.
            </div>
            <div className="flex gap-4 mt-4 md:mt-0">
              <a
                href="#"
                className="text-gray-400 hover:text-white transition"
              >
                Privacy Policy
              </a>
              <a
                href="#"
                className="text-gray-400 hover:text-white transition"
              >
                Terms of Service
              </a>
              <a
                href="#"
                className="text-gray-400 hover:text-white transition"
              >
                Contact
              </a>
            </div>
          </div>
        </div>
      </footer>
    );
  };

  ================
  File: src/components/Layout/Header.tsx
  ================
  import { useAuth } from '../Auth/AuthContext';
  import { Link } from 'react-router-dom';
  import { LogOut, User } from 'lucide-react';

  export const Header = () => {
    const { user, logout } = useAuth();

    return (
      <header className="bg-gray-800 px-6 py-4">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center gap-8">
            <Link to="/" className="text-2xl font-bold">
              Go 2 Control Panel
            </Link>
          </div>

          {user && (
            <div className="flex items-center gap-4">
              <Link
                to="/profile"
                className="flex items-center gap-2 px-4 py-2 rounded-lg hover:bg-gray-700 transition"
              >
                <User className="w-5 h-5" />
                <span>{user.displayName}</span>
              </Link>
              <button
                onClick={() => logout()}
                className="p-2 hover:bg-gray-700 rounded-lg transition"
              >
                <LogOut className="w-5 h-5" />
              </button>
            </div>
          )}
        </div>
      </header>
    );
  };

  ================
  File: src/components/Layout/index.ts
  ================
  export { Header } from './Header';
  export { Sidebar } from './Sidebar';
  export { Footer } from './Footer';

  ================
  File: src/components/Layout/Sidebar.tsx
  ================
  import { useAuth } from '../Auth/AuthContext';
  import { Link, useLocation } from 'react-router-dom';
  import {
    Gauge,
    Users,
    Settings,
    BarChart2,
    Gamepad2,
    User,
    Bell,
  } from 'lucide-react';

  export const Sidebar = () => {
    const { isAdmin } = useAuth();
    const location = useLocation();

    const isActive = (path: string) => location.pathname === path;

    const menuItems = [
      { path: '/control', icon: Gamepad2, label: 'Control', showAlways: true },
      { path: '/stats', icon: BarChart2, label: 'Stats', showAlways: true },
      { path: '/profile', icon: User, label: 'Profile', showAlways: true },
      { path: '/notifications', icon: Bell, label: 'Notifications', showAlways: true },
      { path: '/users', icon: Users, label: 'Users', adminOnly: true },
      { path: '/config', icon: Settings, label: 'Configuration', adminOnly: true },
    ];

    return (
      <aside className="bg-gray-800 w-64 min-h-screen p-4">
        <nav className="space-y-2">
          {menuItems.map((item) => {
            if (item.adminOnly && !isAdmin) return null;
            if (!item.showAlways && !isAdmin) return null;

            const Icon = item.icon;
            return (
              <Link
                key={item.path}
                to={item.path}
                className={`flex items-center gap-3 px-4 py-3 rounded-lg transition ${
                  isActive(item.path)
                    ? 'bg-gray-700 text-white'
                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                }`}
              >
                <Icon className="w-5 h-5" />
                <span>{item.label}</span>
              </Link>
            );
          })}
        </nav>
      </aside>
    );
  };

  ================
  File: src/components/Notifications/NotificationsView.tsx
  ================
  import { useState, useEffect } from 'react';
  import { dummyApi } from '../../services/dummyApi';
  import type { Notification } from '../../types/notifications';
  import { 
    Bell,
    CheckCircle,
    AlertTriangle,
    Info,
    AlertOctagon,
    Trash2,
    Check,
    MailOpen
  } from 'lucide-react';
  import { toast } from 'react-hot-toast';

  export const NotificationsView = () => {
    const [notifications, setNotifications] = useState<Notification[]>([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
      loadNotifications();
    }, []);

    const loadNotifications = async () => {
      try {
        const data = await dummyApi.getNotifications();
        setNotifications(data);
      } catch (error) {
        console.error('Error loading notifications:', error);
        toast.error('Failed to load notifications');
      } finally {
        setLoading(false);
      }
    };

    const handleMarkAsRead = async (id: string) => {
      try {
        await dummyApi.markAsRead(id);
        setNotifications(notifications.map(notification =>
          notification.id === id ? { ...notification, read: true } : notification
        ));
      } catch (error) {
        console.error('Error marking notification as read:', error);
        toast.error('Failed to mark notification as read');
      }
    };

    const handleMarkAllAsRead = async () => {
      try {
        await dummyApi.markAllAsRead();
        setNotifications(notifications.map(notification => ({ ...notification, read: true })));
        toast.success('All notifications marked as read');
      } catch (error) {
        console.error('Error marking all notifications as read:', error);
        toast.error('Failed to mark all notifications as read');
      }
    };

    const handleDelete = async (id: string) => {
      try {
        await dummyApi.deleteNotification(id);
        setNotifications(notifications.filter(notification => notification.id !== id));
        toast.success('Notification deleted');
      } catch (error) {
        console.error('Error deleting notification:', error);
        toast.error('Failed to delete notification');
      }
    };

    const getIcon = (type: Notification['type']) => {
      switch (type) {
        case 'success':
          return <CheckCircle className="w-5 h-5 text-green-400" />;
        case 'warning':
          return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
        case 'error':
          return <AlertOctagon className="w-5 h-5 text-red-400" />;
        default:
          return <Info className="w-5 h-5 text-blue-400" />;
      }
    };

    if (loading) {
      return (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
        </div>
      );
    }

    return (
      <div className="container mx-auto px-6 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="flex justify-between items-center mb-6">
            <div className="flex items-center gap-3">
              <Bell className="w-6 h-6 text-blue-500" />
              <h1 className="text-2xl font-bold">Notifications</h1>
            </div>
            {notifications.some(n => !n.read) && (
              <button
                onClick={handleMarkAllAsRead}
                className="flex items-center gap-2 px-4 py-2 bg-gray-700 rounded-lg hover:bg-gray-600 transition"
              >
                <Check className="w-4 h-4" />
                <span>Mark all as read</span>
              </button>
            )}
          </div>

          <div className="space-y-4">
            {notifications.length === 0 ? (
              <div className="text-center py-8 text-gray-400">
                No notifications
              </div>
            ) : (
              notifications.map(notification => (
                <div
                  key={notification.id}
                  className={`bg-gray-800 rounded-lg p-4 ${
                    !notification.read ? 'border-l-4 border-blue-500' : ''
                  }`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex items-start gap-3">
                      {getIcon(notification.type)}
                      <div>
                        <h3 className="font-semibold">{notification.title}</h3>
                        <p className="text-gray-400 mt-1">{notification.message}</p>
                        <p className="text-sm text-gray-500 mt-2">
                          {new Date(notification.timestamp).toLocaleString()}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      {!notification.read && (
                        <button
                          onClick={() => handleMarkAsRead(notification.id)}
                          className="p-2 hover:bg-gray-700 rounded-lg transition"
                          title="Mark as read"
                        >
                          <MailOpen className="w-4 h-4" />
                        </button>
                      )}
                      <button
                        onClick={() => handleDelete(notification.id)}
                        className="p-2 hover:bg-gray-700 rounded-lg transition text-red-400"
                        title="Delete"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    );
  };

  ================
  File: src/components/Profile/ProfileView.tsx
  ================
  import { useState, useEffect } from 'react';
  import { useAuth } from '../Auth/AuthContext';
  import { getUserPreferences, updateUserPreferences } from '../../services/firebase';
  import type { UserPreferences } from '../../types';
  import { toast } from 'react-hot-toast';
  import {
    User,
    Mail,
    Calendar,
    Shield,
    Save,
    Moon,
    Bell,
    Sliders,
    Gauge,
    AlertTriangle
  } from 'lucide-react';

  export const ProfileView = () => {
    const { user } = useAuth();
    const [preferences, setPreferences] = useState<UserPreferences | null>(null);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);

    useEffect(() => {
      loadPreferences();
    }, []);

    const loadPreferences = async () => {
      if (!user) return;
      
      try {
        const prefs = await getUserPreferences(user.id);
        setPreferences(prefs || {
          userId: user.id,
          theme: 'dark',
          notifications: true,
          controlSettings: {
            sensitivity: 1,
            maxSpeed: 2.5,
            safetyLimits: true,
          },
          dashboardLayout: ['stats', 'controls', 'camera']
        });
      } catch (error) {
        console.error('Error loading preferences:', error);
        toast.error('Failed to load preferences');
      } finally {
        setLoading(false);
      }
    };

    const handlePreferenceChange = (
      key: keyof UserPreferences,
      value: any
    ) => {
      if (!preferences) return;
      
      setPreferences({
        ...preferences,
        [key]: value
      });
    };

    const handleControlSettingChange = (
      key: keyof UserPreferences['controlSettings'],
      value: any
    ) => {
      if (!preferences) return;
      
      setPreferences({
        ...preferences,
        controlSettings: {
          ...preferences.controlSettings,
          [key]: value
        }
      });
    };

    const handleSave = async () => {
      if (!user || !preferences) return;
      
      setSaving(true);
      try {
        await updateUserPreferences(user.id, preferences);
        toast.success('Preferences saved successfully');
      } catch (error) {
        console.error('Error saving preferences:', error);
        toast.error('Failed to save preferences');
      } finally {
        setSaving(false);
      }
    };

    if (loading || !user) {
      return (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
        </div>
      );
    }

    return (
      <div className="container mx-auto px-6 py-8">
        <div className="max-w-4xl mx-auto space-y-8">
          {/* Profile Info */}
          <div className="bg-gray-800 rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-6">Profile Information</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="flex items-center gap-3">
                <User className="w-5 h-5 text-gray-400" />
                <div>
                  <div className="text-sm text-gray-400">Display Name</div>
                  <div>{user.displayName}</div>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Mail className="w-5 h-5 text-gray-400" />
                <div>
                  <div className="text-sm text-gray-400">Email</div>
                  <div>{user.email}</div>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Calendar className="w-5 h-5 text-gray-400" />
                <div>
                  <div className="text-sm text-gray-400">Joined</div>
                  <div>{new Date(user.createdAt).toLocaleDateString()}</div>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Shield className="w-5 h-5 text-gray-400" />
                <div>
                  <div className="text-sm text-gray-400">Role</div>
                  <div className="capitalize">{user.role}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Preferences */}
          {preferences && (
            <div className="bg-gray-800 rounded-lg p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold">Preferences</h2>
                <button
                  onClick={handleSave}
                  disabled={saving}
                  className="flex items-center gap-2 px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700 transition disabled:opacity-50"
                >
                  <Save className="w-4 h-4" />
                  <span>{saving ? 'Saving...' : 'Save Changes'}</span>
                </button>
              </div>

              <div className="space-y-6">
                {/* General Settings */}
                <div>
                  <h3 className="text-lg font-medium mb-4">General Settings</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Moon className="w-5 h-5 text-gray-400" />
                        <span>Dark Theme</span>
                      </div>
                      <button
                        onClick={() => handlePreferenceChange('theme', preferences.theme === 'dark' ? 'light' : 'dark')}
                        className={`w-12 h-6 rounded-full transition-colors ${
                          preferences.theme === 'dark' ? 'bg-blue-600' : 'bg-gray-600'
                        }`}
                      >
                        <div
                          className={`w-4 h-4 rounded-full bg-white transition-transform ${
                            preferences.theme === 'dark' ? 'translate-x-7' : 'translate-x-1'
                          }`}
                        />
                      </button>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Bell className="w-5 h-5 text-gray-400" />
                        <span>Notifications</span>
                      </div>
                      <button
                        onClick={() => handlePreferenceChange('notifications', !preferences.notifications)}
                        className={`w-12 h-6 rounded-full transition-colors ${
                          preferences.notifications ? 'bg-blue-600' : 'bg-gray-600'
                        }`}
                      >
                        <div
                          className={`w-4 h-4 rounded-full bg-white transition-transform ${
                            preferences.notifications ? 'translate-x-7' : 'translate-x-1'
                          }`}
                        />
                      </button>
                    </div>
                  </div>
                </div>

                {/* Control Settings */}
                <div>
                  <h3 className="text-lg font-medium mb-4">Control Settings</h3>
                  <div className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <Sliders className="w-5 h-5 text-gray-400" />
                          <span>Control Sensitivity</span>
                        </div>
                        <span>{preferences.controlSettings.sensitivity}x</span>
                      </div>
                      <input
                        type="range"
                        min="0.1"
                        max="2"
                        step="0.1"
                        value={preferences.controlSettings.sensitivity}
                        onChange={(e) => handleControlSettingChange('sensitivity', parseFloat(e.target.value))}
                        className="w-full"
                      />
                    </div>
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <Gauge className="w-5 h-5 text-gray-400" />
                          <span>Maximum Speed</span>
                        </div>
                        <span>{preferences.controlSettings.maxSpeed} m/s</span>
                      </div>
                      <input
                        type="range"
                        min="0.5"
                        max="5"
                        step="0.5"
                        value={preferences.controlSettings.maxSpeed}
                        onChange={(e) => handleControlSettingChange('maxSpeed', parseFloat(e.target.value))}
                        className="w-full"
                      />
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <AlertTriangle className="w-5 h-5 text-gray-400" />
                        <span>Safety Limits</span>
                      </div>
                      <button
                        onClick={() => handleControlSettingChange('safetyLimits', !preferences.controlSettings.safetyLimits)}
                        className={`w-12 h-6 rounded-full transition-colors ${
                          preferences.controlSettings.safetyLimits ? 'bg-blue-600' : 'bg-gray-600'
                        }`}
                      >
                        <div
                          className={`w-4 h-4 rounded-full bg-white transition-transform ${
                            preferences.controlSettings.safetyLimits ? 'translate-x-7' : 'translate-x-1'
                          }`}
                        />
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  ================
  File: src/components/Stats/StatsView.tsx
  ================
  import { useState, useEffect } from 'react';
  import { dummyApi } from '../../services/dummyApi';
  import type { RobotStats } from '../../types';
  import {
    Battery,
    Gauge,
    Thermometer,
    Cloud,
    Zap,
    Timer,
    Cpu,
    Signal,
    Navigation,
    AlertTriangle,
    Settings
  } from 'lucide-react';

  export const StatsView = () => {
    const [stats, setStats] = useState<RobotStats | null>(null);

    useEffect(() => {
      // Initial load
      loadStats();
      
      // Subscribe to updates
      const unsubscribe = dummyApi.subscribeToStats((newStats) => {
        setStats(newStats);
      });

      return () => {
        unsubscribe();
      };
    }, []);

    const loadStats = async () => {
      try {
        const currentStats = await dummyApi.getStats();
        setStats(currentStats);
      } catch (error) {
        console.error('Error loading stats:', error);
      }
    };

    const formatUptime = (seconds: number) => {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      return `${hours}h ${minutes}m`;
    };

    if (!stats) {
      return (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
        </div>
      );
    }

    return (
      <div className="container mx-auto px-6 py-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {/* System Status */}
          <div className="bg-gray-800 rounded-lg p-6 col-span-full">
            <h2 className="text-xl font-semibold mb-4">System Status</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="bg-gray-700 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-gray-400">Status</span>
                  <div className="w-3 h-3 rounded-full bg-green-500"></div>
                </div>
                <div className="text-2xl font-bold">Online</div>
              </div>
              <div className="bg-gray-700 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-gray-400">Uptime</span>
                  <Timer className="w-5 h-5 text-blue-400" />
                </div>
                <div className="text-2xl font-bold">{formatUptime(stats.uptime)}</div>
              </div>
              <div className="bg-gray-700 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-gray-400">Errors</span>
                  <AlertTriangle className="w-5 h-5 text-yellow-400" />
                </div>
                <div className="text-2xl font-bold">{stats.errors}</div>
              </div>
              <div className="bg-gray-700 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-gray-400">Mode</span>
                  <Settings className="w-5 h-5 text-purple-400" />
                </div>
                <div className="text-2xl font-bold">{stats.mode}</div>
              </div>
            </div>
          </div>

          {/* Power Metrics */}
          <div className="bg-gray-800 rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Power</h2>
            <div className="space-y-6">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Battery className="w-5 h-5 text-green-400" />
                    <span>Battery</span>
                  </div>
                  <span className="text-xl font-bold">{stats.battery}%</span>
                </div>
                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-green-400 rounded-full transition-all duration-500"
                    style={{ width: `${stats.battery}%` }}
                  ></div>
                </div>
              </div>
              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Zap className="w-5 h-5 text-yellow-400" />
                    <span>Power Draw</span>
                  </div>
                  <span className="text-xl font-bold">{stats.powerConsumption}W</span>
                </div>
                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-yellow-400 rounded-full transition-all duration-500"
                    style={{ width: `${(stats.powerConsumption / 500) * 100}%` }}
                  ></div>
                </div>
              </div>
            </div>
          </div>

          {/* Environmental Metrics */}
          <div className="bg-gray-800 rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Environmental</h2>
            <div className="space-y-6">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Thermometer className="w-5 h-5 text-red-400" />
                    <span>Temperature</span>
                  </div>
                  <span className="text-xl font-bold">{stats.temperature}°C</span>
                </div>
                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-red-400 rounded-full transition-all duration-500"
                    style={{ width: `${(stats.temperature / 100) * 100}%` }}
                  ></div>
                </div>
              </div>
              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Cloud className="w-5 h-5 text-blue-400" />
                    <span>Humidity</span>
                  </div>
                  <span className="text-xl font-bold">{stats.humidity}%</span>
                </div>
                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-blue-400 rounded-full transition-all duration-500"
                    style={{ width: `${stats.humidity}%` }}
                  ></div>
                </div>
              </div>
            </div>
          </div>

          {/* Performance Metrics */}
          <div className="bg-gray-800 rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Performance</h2>
            <div className="space-y-6">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Cpu className="w-5 h-5 text-purple-400" />
                    <span>CPU Usage</span>
                  </div>
                  <span className="text-xl font-bold">{stats.cpuUsage}%</span>
                </div>
                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-purple-400 rounded-full transition-all duration-500"
                    style={{ width: `${stats.cpuUsage}%` }}
                  ></div>
                </div>
              </div>
              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Gauge className="w-5 h-5 text-blue-400" />
                    <span>Speed</span>
                  </div>
                  <span className="text-xl font-bold">{stats.speed} m/s</span>
                </div>
                <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-blue-400 rounded-full transition-all duration-500"
                    style={{ width: `${(stats.speed / 5) * 100}%` }}
                  ></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  ================
  File: src/components/Users/UserItem.tsx
  ================
  import { useState } from 'react';
  import type { User } from '../../types';
  import { Edit2, Trash2, MoreVertical } from 'lucide-react';

  interface UserItemProps {
    user: User;
    onRoleChange: (userId: string, newRole: 'admin' | 'user') => Promise<void>;
  }

  export const UserItem = ({ user, onRoleChange }: UserItemProps) => {
    const [showActions, setShowActions] = useState(false);

    return (
      <div className="grid grid-cols-4 gap-4 p-4 items-center hover:bg-gray-700">
        <div className="flex items-center gap-3">
          <div className="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center">
            {user.displayName[0].toUpperCase()}
          </div>
          <span>{user.displayName}</span>
        </div>
        <div>{user.email}</div>
        <div>
          <select
            value={user.role}
            onChange={(e) => onRoleChange(user.id, e.target.value as 'admin' | 'user')}
            className="bg-gray-700 rounded px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </select>
        </div>
        <div className="relative">
          <button
            onClick={() => setShowActions(!showActions)}
            className="p-2 hover:bg-gray-600 rounded-lg transition"
          >
            <MoreVertical className="w-5 h-5" />
          </button>
          
          {showActions && (
            <div className="absolute right-0 mt-2 w-48 bg-gray-700 rounded-lg shadow-lg py-1 z-10">
              <button
                className="w-full px-4 py-2 text-left flex items-center gap-2 hover:bg-gray-600 transition"
              >
                <Edit2 className="w-4 h-4" />
                <span>Edit User</span>
              </button>
              <button
                className="w-full px-4 py-2 text-left flex items-center gap-2 hover:bg-gray-600 text-red-400 transition"
              >
                <Trash2 className="w-4 h-4" />
                <span>Delete User</span>
              </button>
            </div>
          )}
        </div>
      </div>
    );
  };

  ================
  File: src/components/Users/UserList.tsx
  ================
  import { useState, useEffect } from 'react';
  import { getAllUsers, updateUserProfile } from '../../services/firebase';
  import { UserItem } from './UserItem';
  import type { User } from '../../types';
  import { toast } from 'react-hot-toast';
  import { Users as UsersIcon, Search, Plus } from 'lucide-react';

  export const UserList = () => {
    const [users, setUsers] = useState<User[]>([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [loading, setLoading] = useState(true);

    useEffect(() => {
      loadUsers();
    }, []);

    const loadUsers = async () => {
      try {
        const fetchedUsers = await getAllUsers();
        setUsers(fetchedUsers);
      } catch (error) {
        console.error('Error loading users:', error);
        toast.error('Failed to load users');
      } finally {
        setLoading(false);
      }
    };

    const handleRoleChange = async (userId: string, newRole: 'admin' | 'user') => {
      try {
        await updateUserProfile(userId, { role: newRole });
        setUsers(users.map(user => 
          user.id === userId ? { ...user, role: newRole } : user
        ));
        toast.success('User role updated successfully');
      } catch (error) {
        console.error('Error updating user role:', error);
        toast.error('Failed to update user role');
      }
    };

    const filteredUsers = users.filter(user =>
      user.displayName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (loading) {
      return (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
        </div>
      );
    }

    return (
      <div className="container mx-auto px-6 py-8">
        <div className="flex justify-between items-center mb-8">
          <div className="flex items-center gap-3">
            <UsersIcon className="w-6 h-6 text-blue-500" />
            <h1 className="text-2xl font-bold">Users Management</h1>
          </div>
          <button className="flex items-center gap-2 px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700 transition">
            <Plus className="w-5 h-5" />
            <span>Add User</span>
          </button>
        </div>

        <div className="relative mb-6">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Search users..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div className="bg-gray-800 rounded-lg overflow-hidden">
          <div className="grid grid-cols-4 gap-4 p-4 border-b border-gray-700 font-semibold">
            <div>Name</div>
            <div>Email</div>
            <div>Role</div>
            <div>Actions</div>
          </div>
          <div className="divide-y divide-gray-700">
            {filteredUsers.map(user => (
              <UserItem 
                key={user.id} 
                user={user} 
                onRoleChange={handleRoleChange} 
              />
            ))}
          </div>
        </div>
      </div>
    );
  };

  ================
  File: src/config/firebase.config.ts
  ================
  export const firebaseConfig = {
    apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
    authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.VITE_FIREBASE_APP_ID,
    databaseURL: import.meta.env.VITE_FIREBASE_DATABASE_URL
  };

  ================
  File: src/env.d.ts
  ================
  /// <reference types="vite/client" />

  interface ImportMetaEnv {
    readonly VITE_FIREBASE_API_KEY: string;
    readonly VITE_FIREBASE_AUTH_DOMAIN: string;
    readonly VITE_FIREBASE_PROJECT_ID: string;
    readonly VITE_FIREBASE_STORAGE_BUCKET: string;
    readonly VITE_FIREBASE_MESSAGING_SENDER_ID: string;
    readonly VITE_FIREBASE_APP_ID: string;
    readonly VITE_FIREBASE_DATABASE_URL: string;
  }

  interface ImportMeta {
    readonly env: ImportMetaEnv;
  }

  ================
  File: src/index.css
  ================
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  ================
  File: src/main.tsx
  ================
  import { StrictMode } from 'react';
  import { createRoot } from 'react-dom/client';
  import { RouterProvider } from 'react-router-dom';
  import { router } from './routes';
  import './index.css';

  createRoot(document.getElementById('root')!).render(
    <StrictMode>
      <RouterProvider router={router} />
    </StrictMode>
  );

  ================
  File: src/routes.tsx
  ================
  import { createBrowserRouter, Navigate } from 'react-router-dom';
  import { useAuth } from './components/Auth/AuthContext';
  import { LoginPage, RegisterPage } from './components/Auth';
  import { UserList } from './components/Users/UserList';
  import { ConfigPage } from './components/Config/ConfigPage';
  import { ControlView } from './components/Control/ControlView';
  import { StatsView } from './components/Stats/StatsView';
  import { ProfileView } from './components/Profile/ProfileView';
  import { NotificationsView } from './components/Notifications/NotificationsView';
  import App from './App';

  // Protected Route wrapper component
  const ProtectedRoute = ({ children, adminOnly = false }: { children: React.ReactNode; adminOnly?: boolean }) => {
    const { user, loading, isAdmin } = useAuth();

    if (loading) {
      return (
        <div className="flex justify-center items-center h-screen">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
        </div>
      );
    }

    if (!user) {
      return <Navigate to="/login" replace />;
    }

    if (adminOnly && !isAdmin) {
      return <Navigate to="/" replace />;
    }

    return <>{children}</>;
  };

  export const router = createBrowserRouter([
    {
      path: '/',
      element: <App />,
      children: [
        {
          path: '/',
          element: <Navigate to="/control" replace />,
        },
        {
          path: '/control',
          element: (
            <ProtectedRoute>
              <ControlView />
            </ProtectedRoute>
          ),
        },
        {
          path: '/stats',
          element: (
            <ProtectedRoute>
              <StatsView />
            </ProtectedRoute>
          ),
        },
        {
          path: '/profile',
          element: (
            <ProtectedRoute>
              <ProfileView />
            </ProtectedRoute>
          ),
        },
        {
          path: '/users',
          element: (
            <ProtectedRoute adminOnly>
              <UserList />
            </ProtectedRoute>
          ),
        },
        {
          path: '/config',
          element: (
            <ProtectedRoute adminOnly>
              <ConfigPage />
            </ProtectedRoute>
          ),
        },
        {
          path: '/login',
          element: <LoginPage />,
        },
        {
          path: '/register',
          element: <RegisterPage />,
        },
        {
          path: '/notifications',
          element: (
            <ProtectedRoute>
              <NotificationsView />
            </ProtectedRoute>
          ),
        },
      ],
    },
  ]);

  ================
  File: src/services/api.ts
  ================
  import axios ,{ AxiosResponse }from 'axios';
  import type { RobotStats } from '../types';

  const API_BASE_URL = 'http://localhost:5000/api';  // Replace with your Flask backend URL

  const api = axios.create({
    baseURL: API_BASE_URL,
    headers: {
      'Content-Type': 'application/json',
      //'Accept': 'application/json',
    },
    withCredentials: true // if using credentials
  });

  // Add auth token to requests
  api.interceptors.request.use((config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  });

  interface LogEntry {
    operation: string;
    timestamp: string;
    userId: string;
  }

  export const robotApi = {
    // Connection endpoints
    connect: (ipAddress: string) =>
      api.post('/robot/connect', { ipAddress }),

    terminateSession: () =>
      api.post('/robot/terminate'),

    // Robot control endpoints
    sendCommand: (command: string) => 
      api.post('/robot/command', { command }),

    getStatus: () => 
      api.get<RobotStats>('/robot/status'),

    // Configuration endpoints
    updateConfig: (config: Record<string, any>) =>
      api.post('/robot/config', config),

    getConfig: () =>
      api.get('/robot/config'),

    // System endpoints
    getSystemLogs: (limit: number = 100) =>
      api.get('/system/logs', { params: { limit } }),

    checkConnection: () =>
      api.get('/system/health'),

      // Add the logs endpoint
      logOperation: (logEntry: LogEntry): Promise<AxiosResponse> =>
        api.post('/robot/logs', logEntry),
  };

  export default api;

  ================
  File: src/services/dummyApi.ts
  ================
  import type { RobotStats } from '../types';
  import type { Notification } from '../types/notifications';

  // Dummy stats data generator
  const generateDummyStats = (): RobotStats => ({
    battery: Math.floor(Math.random() * (100 - 20) + 20),
    temperature: Math.floor(Math.random() * (80 - 20) + 20),
    humidity: Math.floor(Math.random() * (100 - 30) + 30),
    cpuUsage: Math.floor(Math.random() * (100 - 10) + 10),
    powerConsumption: Math.floor(Math.random() * (500 - 100) + 100),
    speed: Number((Math.random() * 5).toFixed(1)),
    mode: ['Manual', 'Autonomous', 'Hybrid'][Math.floor(Math.random() * 3)],
    uptime: Math.floor(Math.random() * 86400), // Random seconds up to 24 hours
    errors: Math.floor(Math.random() * 5),
  });

  // Dummy notifications data
  const dummyNotifications: Notification[] = [
    {
      id: '1',
      title: 'Battery Low',
      message: 'Robot battery level is below 20%. Please connect to charging station.',
      type: 'warning',
      timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(), // 5 minutes ago
      read: false,
    },
    {
      id: '2',
      title: 'Operation Completed',
      message: 'Scheduled maintenance routine has been completed successfully.',
      type: 'success',
      timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago
      read: true,
    },
    {
      id: '3',
      title: 'System Update',
      message: 'New firmware version 2.1.0 is available for installation.',
      type: 'info',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago
      read: false,
    },
    {
      id: '4',
      title: 'Connection Lost',
      message: 'Temporary connection loss detected. Reconnected automatically.',
      type: 'error',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 5).toISOString(), // 5 hours ago
      read: true,
    },
    {
      id: '5',
      title: 'Temperature Warning',
      message: 'Motor temperature exceeding normal operating range.',
      type: 'warning',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 day ago
      read: false,
    },
  ];

  // Simulated API delay
  const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

  export const dummyApi = {
    // Stats API
    getStats: async (): Promise<RobotStats> => {
      await delay(800); // Simulate network delay
      return generateDummyStats();
    },

    subscribeToStats: (callback: (stats: RobotStats) => void) => {
      // Update stats every 5 seconds
      const interval = setInterval(() => {
        callback(generateDummyStats());
      }, 5000);

      return () => clearInterval(interval);
    },

    // Notifications API
    getNotifications: async (): Promise<Notification[]> => {
      await delay(1000);
      return [...dummyNotifications].sort(
        (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
      );
    },

    markAsRead: async (notificationId: string): Promise<void> => {
      await delay(500);
      const notification = dummyNotifications.find(n => n.id === notificationId);
      if (notification) {
        notification.read = true;
      }
    },

    markAllAsRead: async (): Promise<void> => {
      await delay(800);
      dummyNotifications.forEach(notification => {
        notification.read = true;
      });
    },

    deleteNotification: async (notificationId: string): Promise<void> => {
      await delay(500);
      const index = dummyNotifications.findIndex(n => n.id === notificationId);
      if (index !== -1) {
        dummyNotifications.splice(index, 1);
      }
    },
  };

  ================
  File: src/services/firebase.ts
  ================
  import { initializeApp } from 'firebase/app';
  import { 
    getAuth, 
    signInWithEmailAndPassword, 
    createUserWithEmailAndPassword,
    signOut,
    onAuthStateChanged,
    User as FirebaseUser 
  } from 'firebase/auth';
  import { 
    getDatabase, 
    ref, 
    set, 
    get,
    update 
  } from 'firebase/database';
  import type { User, UserPreferences } from '../types';
  import { firebaseConfig } from '../config/firebase.config';

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const database = getDatabase(app);

  // Auth functions
  export const loginUser = async (email: string, password: string) => {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    
    // Update last login time
    await update(ref(database, `users/${userCredential.user.uid}`), {
      lastLogin: new Date().toISOString(),
      role: isAdminEmail(email) ? 'admin' : 'user' // Ensure admin role is set on login
    });
    
    return userCredential;
  };

  export const registerUser = async (email: string, password: string, displayName: string) => {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    
    // Create user profile in realtime database
    await set(ref(database, `users/${user.uid}`), {
      email,
      displayName,
      role: email === 'shakhawat.swe@gmail.com' ? 'admin' : 'user',
      createdAt: new Date().toISOString(),
      lastLogin: new Date().toISOString()
    });

    return userCredential;
  };

  export const logoutUser = () => {
    return signOut(auth);
  };

  export const getCurrentUser = (): Promise<FirebaseUser | null> => {
    return new Promise((resolve, reject) => {
      const unsubscribe = onAuthStateChanged(
        auth,
        (user) => {
          unsubscribe();
          resolve(user);
        },
        reject
      );
    });
  };

  // Database functions
  export const getUserProfile = async (userId: string): Promise<User | null> => {
    const snapshot = await get(ref(database, `users/${userId}`));
    const userData = snapshot.val();
    if (userData) {
      // Ensure admin role is set correctly based on email
      if (isAdminEmail(userData.email)) {
        userData.role = 'admin';
        // Update the role in database if it's not correct
        if (userData.role !== 'admin') {
          await update(ref(database, `users/${userId}`), { role: 'admin' });
        }
      }
    }
    return userData;
  };

  export const updateUserProfile = async (userId: string, data: Partial<User>) => {
    return update(ref(database, `users/${userId}`), data);
  };

  export const getUserPreferences = async (userId: string): Promise<UserPreferences | null> => {
    const snapshot = await get(ref(database, `preferences/${userId}`));
    return snapshot.val();
  };

  export const updateUserPreferences = async (userId: string, preferences: Partial<UserPreferences>) => {
    return update(ref(database, `preferences/${userId}`), preferences);
  };

  export const getAllUsers = async (): Promise<User[]> => {
    const snapshot = await get(ref(database, 'users'));
    return Object.values(snapshot.val() || {});
  };

  // Add a function to check if a user is admin
  export const isAdminEmail = (email: string) => {
    return email === 'shakhawat.swe@gmail.com';
  };

  export { auth, database };

  ================
  File: src/services/robotService.ts
  ================
  import { robotApi } from './api';
  import { database, getCurrentUser } from './firebase';
  import { ref, onValue, off } from 'firebase/database';
  import type { RobotStats } from '../types';

  class RobotService {
    private statsListener: any = null;
    private currentIp: string | null = null;

    // Connect to robot
    async connect(ipAddress: string): Promise<void> {
      try {
        await robotApi.connect(ipAddress);
        this.currentIp = ipAddress;
      } catch (error) {
        console.error('Error connecting to robot:', error);
        throw error;
      }
    }

    // Send control commands to the robot
    async sendCommand(command: string): Promise<void> {
      if (!this.currentIp) {
        throw new Error('Not connected to robot');
      }

      try {
        await robotApi.sendCommand(command);
        await this.logOperation(`Sent command: ${command}`);
      } catch (error) {
        console.error('Error sending command:', error);
        throw error;
      }
    }

    // Terminate session
    async terminateSession(): Promise<void> {
      if (!this.currentIp) {
        throw new Error('Not connected to robot');
      }

      try {
        await robotApi.terminateSession();
        this.currentIp = null;
        await this.logOperation('Session terminated');
      } catch (error) {
        console.error('Error terminating session:', error);
        throw error;
      }
    }

    // Get current robot stats
    async getRobotStats(): Promise<RobotStats> {
      try {
        const response = await robotApi.getStatus();
        return response.data;
      } catch (error) {
        console.error('Error getting robot stats:', error);
        throw error;
      }
    }

    // Subscribe to real-time robot stats updates
    subscribeToStats(callback: (stats: RobotStats) => void): void {
      const statsRef = ref(database, 'robotStats');
      this.statsListener = onValue(statsRef, (snapshot) => {
        const stats = snapshot.val();
        callback(stats);
      });
    }

    // Unsubscribe from stats updates
    unsubscribeFromStats(): void {
      if (this.statsListener) {
        const statsRef = ref(database, 'robotStats');
        off(statsRef, 'value', this.statsListener);
        this.statsListener = null;
      }
    }

    // Log robot operation
    async logOperation(operation: string): Promise<void> {
      const user = await getCurrentUser();
      if (!user) throw new Error('No user logged in');

      const logEntry = {
        operation,
        timestamp: new Date().toISOString(),
        userId: user.uid,
      };

      try {
        await robotApi.logOperation(logEntry);
      } catch (error) {
        console.error('Error logging operation:', error);
        throw error;
      }
    }
  }

  export const robotService = new RobotService();
  export default robotService;

  ================
  File: src/types/index.ts
  ================
  export interface User {
    id: string;
    email: string;
    displayName: string;
    role: 'admin' | 'user';
    createdAt: string;
    lastLogin: string;
  }

  export interface RobotStats {
    battery: number;
    speed: number;
    mode: 'Manual' | 'Autonomous';
    temperature: number;
    humidity: number;
    powerConsumption: number;
    batteryCapacity: number;
    cpuUsage: number;
    signalStrength: number;
    gpsAccuracy: number;
    uptime: number;
    errors: number;
  }

  export interface UserPreferences {
    userId: string;
    theme: 'light' | 'dark';
    notifications: boolean;
    controlSettings: {
      sensitivity: number;
      maxSpeed: number;
      safetyLimits: boolean;
    };
    dashboardLayout: string[];
  }

  ================
  File: src/types/notifications.ts
  ================
  export interface Notification {
    id: string;
    title: string;
    message: string;
    type: 'info' | 'warning' | 'error' | 'success';
    timestamp: string;
    read: boolean;
  }

  ================
  File: src/vite-env.d.ts
  ================
  /// <reference types="vite/client" />

  ================
  File: tailwind.config.js
  ================
  /** @type {import('tailwindcss').Config} */
  export default {
    content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
    theme: {
      extend: {},
    },
    plugins: [],
  };

  ================
  File: tsconfig.app.json
  ================
  {
    "compilerOptions": {
      "target": "ES2020",
      "useDefineForClassFields": true,
      "lib": ["ES2020", "DOM", "DOM.Iterable"],
      "module": "ESNext",
      "skipLibCheck": true,

      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "isolatedModules": true,
      "moduleDetection": "force",
      "noEmit": true,
      "jsx": "react-jsx",

      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true
    },
    "include": ["src"]
  }

  ================
  File: tsconfig.json
  ================
  {
    "files": [],
    "references": [
      { "path": "./tsconfig.app.json" },
      { "path": "./tsconfig.node.json" }
    ]
  }

  ================
  File: tsconfig.node.json
  ================
  {
    "compilerOptions": {
      "target": "ES2022",
      "lib": ["ES2023"],
      "module": "ESNext",
      "skipLibCheck": true,

      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "isolatedModules": true,
      "moduleDetection": "force",
      "noEmit": true,

      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true
    },
    "include": ["vite.config.ts"]
  }

  ================
  File: vite.config.ts
  ================
  // 
  // vite.config.ts
  import { defineConfig } from 'vite';
  import react from '@vitejs/plugin-react';

  export default defineConfig({
      plugins: [react()],
      server: {
          proxy: {
              '/api': {
                  target: 'http://localhost:5000',
                  changeOrigin: true,
                  secure: false,
                  ws: true,
              }
          }
      },
      optimizeDeps: {
          exclude: ['lucide-react'],
      },
  });
